%--------------------------------------------------------------------------
% Author: Mina Henein - mina.henein@anu.edu.au - 08/02/18
% Contributors:
%--------------------------------------------------------------------------
% multipleCameraCalibration_main

%% config setup
config = CameraConfig();
config.set('groundTruthFileName' ,'app10_groundTruth.graph');
config.set('measurementsFileName','app10_measurements.graph');
config.set('motionModel','constantSE3MotionDA');
config.set('std2PointsSE3Motion', [0.1,0.1,0.1]');
config.set('SE3MotionVertexInitialization','eye');
config = setUnitTestConfig(config);
rng(config.rngSeed);

%% solver
planeMotion = [0.04;0;0;0;0;0];
% planeMotion = [0;0;0;-0.1745;0;0];
% planeMotion = [0.04;0;0;0.1745;0;0];
writeDataAssociationVerticesEdges_constantSE3Motion(config,planeMotion)

%% 5.1 For initial (without SE3)
config.set('pointMotionMeasurement','Off')
config.set('measurementsFileName','app10_measurementsNoSE3.graph')
config.set('groundTruthFileName','app10_groundTruthNoSE3.graph')
groundTruthNoSE3Cell = graphFileToCell(config,config.groundTruthFileName);
measurementsNoSE3Cell = graphFileToCell(config,config.measurementsFileName);

%% 5.2 For test (with SE3)
config.set('pointMotionMeasurement','point2DataAssociation');
config.set('measurementsFileName','app10_measurements.graph');
config.set('groundTruthFileName','app10_groundTruth.graph');
writeDataAssociationVerticesEdges_constantSE3Motion(config,planeMotion);
measurementsCell = graphFileToCell(config,config.measurementsFileName);
groundTruthCell  = graphFileToCell(config,config.groundTruthFileName);

%% 6. Solve
%% 6.1 Without SE3
timeStart = tic;
initialGraph0 = Graph();
initialSolver = initialGraph0.process(config,measurementsNoSE3Cell,groundTruthNoSE3Cell);
initialSolverEnd = initialSolver(end);
totalTime = toc(timeStart);
fprintf('\nTotal time solving: %f\n',totalTime)

%get desired graphs & systems
initialGraph0  = initialSolverEnd.graphs(1);
initialGraphN  = initialSolverEnd.graphs(end);
%save results to graph file
initialGraphN.saveGraphFile(config,'app9_resultsNoSE3.graph');

%% 6.2 With SE3
%no constraints
timeStart = tic;
graph0 = Graph();
solver = graph0.process(config,measurementsCell,groundTruthCell);
solverEnd = solver(end);
totalTime = toc(timeStart);
fprintf('\nTotal time solving: %f\n',totalTime)

%get desired graphs & systems
graph0  = solverEnd.graphs(1);
graphN  = solverEnd.graphs(end);
%save results to graph file
graphN.saveGraphFile(config,'app9_results.graph');

%% 7. Error analysis
%load ground truth into graph, sort if required
% to evaluate vs GT generated with constant acceleration
groundTruthCell  = graphFileToCell(config,'app8_groundTruth.graph');

graphGTNoSE3 = Graph(config,groundTruthNoSE3Cell);
graphGT = Graph(config,groundTruthCell);
fprintf('\nInitial results for without SE(3) Transform:\n')
resultsNoSE3 = errorAnalysis(config,graphGTNoSE3,initialGraphN);
fprintf('\nFinal results for SE(3) Transform:\n')
resultsSE3 = errorAnalysis(config,graphGT,graphN);

groundTruthCell  = graphFileToCell(config,config.groundTruthFileName);
measurementsCell = graphFileToCell(config,config.measurementsFileName);
timeStart = tic;
graph0 = Graph();
solver = graph0.process(config,measurementsCell,groundTruthCell);
solverEnd = solver(end);
totalTime = toc(timeStart);
fprintf('\nTotal time solving: %f\n',totalTime)
%
graphN  = solverEnd.graphs(end);
graphN.saveGraphFile(config,'resultsTest11.graph');
%
graphGT = Graph(config,groundTruthCell);
results = errorAnalysis(config,graphGT,graphN);

%% plot graph files
% h = figure;
axis equal;
xlabel('x')
ylabel('y')
zlabel('z')
hold on
plotGraphFile(config,groundTruthCell,[0 0 1]);
plotGraph(config,graphN,[1 0 0]);

figure
subplot(2,2,1)
spy(solverEnd.systems(end).A)
subplot(2,2,2)
spy(solverEnd.systems(end).H)
subplot(2,2,3)
spy(solverEnd.systems(end).covariance)
subplot(2,2,4)
spy(solverEnd.systems(end).covSqrtInv)