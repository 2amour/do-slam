classdef SimulatedEnvironmentSensor < Sensor
    %SimulatedEnvironmentSensor Summary of this class goes here
    %   Detailed explanation goes here
    
    %% 1. Properties
    properties(GetAccess = 'protected', SetAccess = 'protected')
        points
        objects
        fieldOfView
    end
    
    properties(Dependent)
        nPoints
        nObjects
    end
    
    %% 2. Methods
    % Dependent properties
    methods
        function nPoints = get.nPoints(self)
            nPoints = numel(self.points);
        end
        function nObjects = get.nObjects(self)
            nObjects = numel(self.objects);
        end
    end
    
    
    
    % Getter & Setter
    methods(Access = public) %set to protected later??
        function out = getSwitch(self,property,varargin)
            switch property
                case {'GP_Pose','R3xso3Pose','logSE3Pose','R3xso3Position','logSE3Position','axisAngle','R'}
                    out = self.trajectory.get(property,varargin{1});
                case 'static'
                    out = self.trajectory.get(property);
                otherwise
                    out = self.(property);
            end
        	
        end
        
        function self = setSwitch(self,property,value)
        	self.(property) = value;
        end
    end
    
    % Constructor
    methods(Access = public)
        function self = SimulatedEnvironmentSensor()
        end
    end
    
    % Add environment
    methods(Access = public)
        function self = addEnvironment(self,environment)
            points(environment.nEnvironmentPoints) = Point();
            %loop over environmentPoints, create Points
            for i = 1:environment.nEnvironmentPoints
                points(i) = Point(environment.get('environmentPoints',i));
            end
            
            %loop over environmentPrimitives, create objects
            objects(environment.nEnvironmentPrimitives) = Object();
            for i = 1:environment.nEnvironmentPrimitives
                switch class(environment.get('environmentPrimitives',i))
                    case 'EP_Rectangle'
                        objects(i) = GEO_Plane(environment.get('environmentPrimitives',i));
                    otherwise
                        error('Error: object conversion for %s not yet implemented',class(environment.get('environmentPrimitives',i)))
                end
            end
            
            %add
            self.points  = points;
            self.objects = objects;
        end
    end
    
    % Add camera
    methods(Access = public)
        function self = addCamera(fieldOfView,trajectory)
            self.fieldOfView = fieldOfView;
            self.trajectory  = trajectory;
        end
    end
    
    %Declare external methods
    methods(Access = public)
        % point visibility
        [visibility,relativePoint] = pointVisible(self,point,t)
        % Measurements
        generateMeasurements(self,config,sensorEnvironment)
        
    end
    
end

