classdef PoseTrajectory < Trajectory
    %PoseTrajectory Summary of this class goes here
    %   Detailed explanation goes here
    
    %% 1. Properties
    properties
    end
    
    %% 2. Methods
    % Constructor
    methods(Access = public) %set to private later??
        function self = PoseTrajectory(parameterisation,mode,varargin)
            switch nargin
                case 0
                    %allows pre-allocation
                otherwise
                    self.parameterisation = parameterisation;
                    switch mode
                        case 'waypoints'
                            waypoints = varargin{1};
                            tFit      = varargin{2};
                            fitType   = varargin{3};
                            self.fitTrajectory(waypoints,tFit,fitType);
                        case 'discrete'
                            self.dataPoints = varargin{1};
                        case 'continuous'
                            self.model = varargin{1};
                    end
            end
        end
        
    end
    
    % Fitting
    methods(Access = public) %set to private later??
        function self = fitTrajectory(self,waypoints,tFit,fitType)
            %models
            fX = fit(waypoints(1,:),waypoints(2,:),fitType);
            fY = fit(waypoints(1,:),waypoints(3,:),fitType);
            fZ = fit(waypoints(1,:),waypoints(4,:),fitType);
            
            poses = zeros(6,numel(tFit));
            poses(1,:) = fX(tFit)';
            poses(2,:) = fY(tFit)';
            poses(3,:) = fZ(tFit)';

            poses(1:3,:) = poses(:,1:end-1);
            forward = [1,0,0]';

            for i = 1:nPoses-1
                v = poses(1:3,i+1) - poses(1:3,i);
                %compute axis angle to go from forward-> v
                axisAngle = vrrotvec(forward,v);
            %     R1 = rot(unit(v)*pi/2); %reorient camera
            %     R2 = rot(axisAngle(1:3)'*axisAngle(4)); %face focus
                poses(4:6,i) = axisAngle(1:3)'*axisAngle(4); 
            end
            
            
        end
    end
    
end

